{"version":3,"file":"components.cjs.production.min.js","sources":["../src/components/Graph/util.ts","../src/components/Graph/BarGraph.tsx","../src/components/Graph/LineGraph.tsx","../src/components/Graph/PieGraph.tsx","../src/components/Icon/Icon.tsx","../src/components/Button/Button.tsx","../src/components/Dropdown/Dropdown.tsx","../src/components/Badge/Badge.tsx","../src/components/Pill/Pill.tsx","../src/components/Checkbox/Checkbox.tsx","../src/components/Navbar/Navbar.tsx","../src/helpers/controlSize.ts","../src/components/Alert/Alert.tsx","../src/components/TextInput/TextInput.tsx","../src/components/DateTimePicker/DateTimePicker.tsx","../src/components/Label/Label.tsx","../src/components/Tab/Tab.tsx","../src/components/Typeahead/Typeahead.tsx","../src/components/Calendar/Calendar.tsx","../src/index.tsx","../src/components/Breadcrumb/Breadcrumb.tsx","../src/components/Breadcrumb/BreadcrumbItem.tsx","../src/components/Layout/Column.tsx","../src/components/Layout/Container.tsx","../src/components/Image/Image.tsx","../src/components/List/List.tsx","../src/components/List/ListItem.tsx","../src/components/Modal/Modal.tsx","../src/components/Panel/Panel.tsx","../src/components/Radio/Radio.tsx","../src/components/RichText/RichText.tsx","../src/components/Layout/Row.tsx","../src/components/Select/Select.tsx","../src/components/Spinner/Spinner.tsx","../src/components/Spinner/strings.ts","../src/components/Switch/Switch.tsx","../src/components/Tab/TabsHeader.tsx","../src/components/TextField/TextField.tsx","../src/components/Toaster/index.tsx","../src/components/Toaster/components.tsx","../src/components/VideoPlayer/VideoPlayer.tsx"],"sourcesContent":["import ChartJs, {\n  ChartData,\n  ChartDataSets,\n  Point,\n  CommonAxe,\n  ChartConfiguration,\n  ChartOptions,\n} from 'chart.js'\n\nimport { Dataset, Axis } from './interfaces'\n\nexport function getAxisType(type: string): ChartJs.ScaleType {\n  if (type === 'category') {\n    return 'category'\n  }\n  if (type === 'linear') {\n    return 'linear'\n  }\n  if (type === 'time') {\n    return 'time'\n  }\n\n  return 'category'\n}\n\nexport function getAxisLabel(item: Axis): ChartJs.ScaleTitleOptions {\n  return {\n    display: !!item.label,\n    labelString: item.label,\n  }\n}\n\nexport function axisMapper(item: Axis): ChartJs.CommonAxe {\n  const axis: ChartJs.CommonAxe = {\n    display: !!item.label,\n    scaleLabel: getAxisLabel(item),\n    type: getAxisType(item.type),\n    ticks: {\n      beginAtZero: true,\n    },\n  }\n\n  if (item.type === 'time') {\n    const timeScale: ChartJs.TimeScale = {\n      unit: item.timeFormat,\n      stepSize: item.timeStepSize,\n    }\n\n    axis.time = timeScale\n  }\n\n  return axis\n}\n\nexport function getAxes(axes: Axis[], stacked: boolean): CommonAxe[] {\n  let chartAxes: CommonAxe[] = []\n  if (axes) {\n    chartAxes = axes.map(axisMapper)\n  }\n\n  chartAxes.forEach((axis) => {\n    axis.stacked = stacked\n  })\n\n  return chartAxes\n}\n\nexport function getChartDataset(dataset: Dataset): ChartDataSets {\n  const { label } = dataset\n  const data: Point[] = []\n  const backgroundColor: string[] = []\n  const borderColor: string[] = []\n\n  dataset.data.forEach((d) => {\n    data.push(d.y)\n\n    const background = d.backgroundColor ? d.backgroundColor : dataset.backgroundColor\n    const border = d.borderColor ? d.borderColor : dataset.borderColor\n    if (background !== undefined) {\n      backgroundColor.push(background)\n    }\n\n    if (border !== undefined) {\n      borderColor.push(border)\n    }\n  })\n\n  const pointBackgroundColor = backgroundColor\n  const pointBorderColor = borderColor\n\n  return {\n    label,\n    data,\n    backgroundColor,\n    borderColor,\n    pointBackgroundColor,\n    pointBorderColor,\n    borderWidth: 1,\n  }\n}\n\nexport function getChartDatasets(datasets: Dataset[]): ChartDataSets[] {\n  return datasets.map(getChartDataset)\n}\n\nexport function getLabelsFromDataset(datasets: Dataset[]) {\n  const labels: string[] = []\n  datasets.forEach((dataset) =>\n    dataset.data.forEach((d) => {\n      if (!labels.includes(d.x)) {\n        labels.push(d.x)\n      }\n    }),\n  )\n\n  return labels\n}\n\nexport function getChartData(datasets: Dataset[]): ChartData {\n  return {\n    labels: getLabelsFromDataset(datasets),\n    datasets: getChartDatasets(datasets),\n  }\n}\n\nexport function getCommonChartOptions(\n  title: string | undefined,\n  titleFontSize: number | undefined,\n  titleFontColor: string | undefined,\n): ChartOptions {\n  const options: ChartOptions = {\n    title: {\n      display: !!title,\n      text: title,\n    },\n  }\n\n  if (options.title) {\n    if (titleFontSize) {\n      options.title.fontSize = titleFontSize\n    }\n\n    if (titleFontColor) {\n      options.title.fontColor = titleFontColor\n    }\n  }\n\n  return options\n}\n\nexport function getCommonChartConfigurations(\n  type: string,\n  title: string | undefined,\n  titleFontSize: number | undefined,\n  titleFontColor: string | undefined,\n  datasets: Dataset[],\n): ChartConfiguration {\n  return {\n    type,\n    data: getChartData(datasets),\n    options: getCommonChartOptions(title, titleFontSize, titleFontColor),\n  }\n}\n","import React, { Component } from 'react'\nimport ChartJs from 'chart.js'\nimport { Axis, Dataset } from './interfaces'\nimport * as util from './util'\n\ninterface Props {\n  /** Determines if the bar graph should be displayed in a horizontal manner */\n  horizontal?: boolean\n  /** Determines if the bar graph should be displayed as a stacked bar graph */\n  stacked?: boolean\n\n  /** the title of the graph for the legend */\n  title?: string\n  /** the font size for the title */\n  titleFontSize?: number\n  /** the color for the title */\n  titleFontColor?: string\n  /** the datasets for the graph */\n  datasets: Dataset[]\n  /** The width of the graph */\n  width?: string\n  /** The height of the graph */\n  height?: string\n\n  /** the list of x axis information */\n  xAxes: Axis[]\n  /** the list of y axis information */\n  yAxes: Axis[]\n}\n\n/**\n * A customizable Bar Graph component built on chart.js\n */\nclass BarGraph extends Component<Props, {}> {\n  graph: ChartJs | null\n\n  chart: HTMLCanvasElement | null\n\n  constructor(props: Props) {\n    super(props)\n    this.graph = null // initalzied in componentDidMount\n    this.chart = null // initalzied in componentDidMount\n  }\n\n  componentDidMount() {\n    const {\n      stacked,\n      title,\n      titleFontSize,\n      titleFontColor,\n      datasets,\n      horizontal,\n      xAxes,\n      yAxes,\n    } = this.props\n\n    const isStacked = !!stacked\n    const type = horizontal ? 'horizontalBar' : 'bar'\n    const config = util.getCommonChartConfigurations(\n      type,\n      title,\n      titleFontSize,\n      titleFontColor,\n      datasets,\n    )\n\n    if (config && config.options) {\n      let scales\n      if (!horizontal) {\n        scales = {\n          xAxes: util.getAxes(xAxes, isStacked),\n          yAxes: util.getAxes(yAxes, isStacked),\n        }\n      } else {\n        scales = {\n          xAxes: util.getAxes(yAxes, isStacked),\n          yAxes: util.getAxes(xAxes, isStacked),\n        }\n      }\n\n      config.options.scales = scales\n    }\n\n    this.graph = new ChartJs(this.chart as HTMLCanvasElement, config)\n  }\n\n  render() {\n    return (\n      <canvas\n        ref={(chart) => {\n          this.chart = chart\n          return this.chart\n        }}\n      />\n    )\n  }\n}\n\nexport { BarGraph }\n","import React, { Component } from 'react'\nimport ChartJs from 'chart.js'\nimport { Axis, Dataset } from './interfaces'\nimport * as util from './util'\n\ninterface Props {\n  /** Determines if the area under the line should be filled with the background color from the dataset */\n  fill?: boolean\n  /** Determines if the the Line Graphs should be displayed in a stacked manner */\n  stacked?: boolean\n\n  /** the title of the graph for the legend */\n  title?: string\n  /** the font size for the title */\n  titleFontSize?: number\n  /** the color for the title */\n  titleFontColor?: string\n  /** the datasets for the graph */\n  datasets: Dataset[]\n  /** The width of the graph */\n  width?: string\n  /** The height of the graph */\n  height?: string\n\n  /** the list of x axis information */\n  xAxes: Axis[]\n  /** the list of y axis information */\n  yAxes: Axis[]\n}\n\n/**\n * A customizable Line Graph component built on chart.js\n */\nclass LineGraph extends Component<Props, {}> {\n  graph: ChartJs | null\n\n  chart: HTMLCanvasElement | null\n\n  constructor(props: Props) {\n    super(props)\n    this.graph = null // initalzied in componentDidMount\n    this.chart = null // initalzied in componentDidMount\n  }\n\n  componentDidMount() {\n    const {\n      title,\n      titleFontSize,\n      titleFontColor,\n      datasets,\n      stacked,\n      fill,\n      yAxes,\n      xAxes,\n    } = this.props\n\n    const type = 'line'\n    let isFill = false\n    if (fill) {\n      isFill = fill\n    }\n\n    const config = util.getCommonChartConfigurations(\n      type,\n      title,\n      titleFontSize,\n      titleFontColor,\n      datasets,\n    )\n    if (config && config.data && config.data.datasets) {\n      for (let i = 0; i < datasets.length; i += 1) {\n        config.data.datasets[i].fill = isFill\n        config.data.datasets[i].backgroundColor = datasets[i].backgroundColor\n        config.data.datasets[i].borderColor = datasets[i].borderColor\n      }\n    }\n\n    if (config && config.options) {\n      const isStacked = !!stacked\n      const scales = {\n        xAxes: util.getAxes(xAxes, false),\n        yAxes: util.getAxes(yAxes, isStacked),\n      }\n\n      config.options.scales = scales\n    }\n\n    this.graph = new ChartJs(this.chart as HTMLCanvasElement, config)\n  }\n\n  render() {\n    return (\n      <canvas\n        ref={(chart) => {\n          this.chart = chart\n          return this.chart\n        }}\n      />\n    )\n  }\n}\n\nexport { LineGraph }\n","import React, { Component } from 'react'\nimport ChartJs from 'chart.js'\nimport { Dataset } from './interfaces'\nimport * as util from './util'\n\ninterface Props {\n  /** Determines if the pie graph should be displayed with a doughnut */\n  doughnut?: boolean\n\n  /** the title of the graph for the legend */\n  title?: string\n  /** the font size for the title */\n  titleFontSize?: number\n  /** the color for the title */\n  titleFontColor?: string\n  /** the datasets for the graph */\n  datasets: Dataset[]\n  /** The width of the graph */\n  width?: string\n  /** The height of the graph */\n  height?: string\n}\n\n/**\n * A customizable Pie Graph component built on chart.js\n */\nclass PieGraph extends Component<Props, {}> {\n  graph: ChartJs | null\n\n  chart: HTMLCanvasElement | null\n\n  constructor(props: Props) {\n    super(props)\n    this.graph = null // initalzied in componentDidMount\n    this.chart = null // initalzied in componentDidMount\n  }\n\n  componentDidMount() {\n    const { doughnut, title, titleFontSize, titleFontColor, datasets } = this.props\n    const type = doughnut ? 'doughnut' : 'pie'\n    const config = util.getCommonChartConfigurations(\n      type,\n      title,\n      titleFontSize,\n      titleFontColor,\n      datasets,\n    )\n    this.graph = new ChartJs(this.chart as HTMLCanvasElement, config)\n  }\n\n  render() {\n    return (\n      <canvas\n        ref={(chart) => {\n          this.chart = chart\n          return this.chart\n        }}\n      />\n    )\n  }\n}\n\nexport { PieGraph }\n","import React, { CSSProperties } from 'react'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { IconProp } from '@fortawesome/fontawesome-svg-core'\nimport { IconType } from './interfaces'\n\n// maps between hospital run icon names and font awesome\nconst iconMap = {\n  add: 'plus',\n  admin: 'user-shield',\n  appointment: 'calendar',\n  'appointment-add': 'calendar-plus',\n  'appointment-remove': 'calendar-minus',\n  calendar: 'calendar-alt',\n  dashboard: 'columns',\n  'down-arrow': 'chevron-down',\n  edit: 'edit',\n  image: 'camera',\n  incident: 'file-alt',\n  lab: 'microscope',\n  'left-arrow': 'chevron-left',\n  medication: 'pills',\n  patient: 'user',\n  'patient-add': 'user-plus',\n  'patient-remove': 'user-minus',\n  patients: 'users',\n  remove: 'minus',\n  'right-arrow': 'chevron-right',\n  save: 'save',\n  setting: 'cog',\n  'up-arrow': 'chevron-up',\n}\n\nfunction getFontAwesomeIcon(icon: IconType): string {\n  return iconMap[icon]\n}\n\ninterface Props {\n  /** The type of icon to display */\n  icon: IconType\n  /**\n   * Defines the class of the icon.\n   */\n  className?: string\n  /**\n   * Defines the style of the icon.\n   */\n  style?: CSSProperties\n  /** Function to execute when user clicks on icon */\n  onClick?: (event: React.MouseEvent<any>) => void\n}\n\n/**\n * Icons provide contextual clues to users to make it easier to recognize functionality\n */\nconst Icon = (props: Props) => {\n  const { icon, className, style, onClick } = props\n  return (\n    <FontAwesomeIcon\n      onClick={onClick}\n      icon={getFontAwesomeIcon(icon) as IconProp}\n      className={className}\n      style={style}\n    />\n  )\n}\n\nexport { Icon }\n","import React, { CSSProperties } from 'react'\nimport BootstrapButton from 'react-bootstrap/Button'\nimport { ButtonType } from './interfaces'\nimport { ButtonVariant } from '../../interfaces'\nimport { IconType } from '../Icon/interfaces'\nimport { Icon } from '../Icon'\n\nexport interface Props {\n  /** Determines if the button should be outlined and not filled. By defaut is false */\n  outlined?: boolean\n  /** Defines the button variant. By default is primary */\n  color?: ButtonVariant\n  /** Determines whether or not the button should be a block button or not. By default false */\n  block?: boolean\n  /** Determines whether or not the button should be disabled or not. By default is false. */\n  disabled?: boolean\n  /** Determines whether or not the button should be a small or large button. By default is undefined. */\n  size?: 'small' | 'large'\n  /** The icon to display */\n  icon?: IconType\n  /** Determines whether or not the icon should display on the left side or right side of the button. By default is left */\n  iconLocation?: 'left' | 'right'\n  /** Handles the on click event for a button */\n  onClick?: (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void\n  /** The children to render */\n  children?: React.ReactNode\n  /**\n   * Defines the class of the button\n   */\n  className?: string\n  /**\n   * Defines the style of the button\n   */\n  style?: CSSProperties\n  /**\n   * Defines the class of the button.\n   */\n  iconClassName?: string\n  /**\n   * Defines the style of the button.\n   */\n  iconStyle?: CSSProperties\n}\n\nfunction getButtonSize(size: string | undefined): 'sm' | 'lg' | undefined {\n  if (size === 'small') {\n    return 'sm'\n  }\n  if (size === 'large') {\n    return 'lg'\n  }\n  return undefined\n}\n\n/**\n * Buttons are used to initiate an action.\n */\nconst Button = (props: Props) => {\n  const {\n    size,\n    iconLocation,\n    outlined,\n    color,\n    icon,\n    block,\n    disabled,\n    onClick,\n    children,\n    className,\n    style,\n    iconClassName,\n    iconStyle,\n  } = props\n\n  const displayIconLeft = icon && iconLocation === 'left'\n  const displayIconRight = icon && iconLocation === 'right'\n\n  let variant = color as string\n  if (outlined) {\n    variant = `outline-${variant}`\n  }\n\n  return (\n    <BootstrapButton\n      variant={variant as ButtonType}\n      block={block}\n      disabled={disabled}\n      size={getButtonSize(size)}\n      onClick={onClick}\n      className={className}\n      style={style}\n    >\n      {displayIconLeft && (\n        <Icon icon={icon as IconType} className={iconClassName} style={iconStyle} />\n      )}{' '}\n      {children}{' '}\n      {displayIconRight && (\n        <Icon icon={icon as IconType} className={iconClassName} style={iconStyle} />\n      )}\n    </BootstrapButton>\n  )\n}\n\nButton.defaultProps = {\n  color: 'primary',\n  iconLocation: 'left',\n}\n\nexport { Button }\n","import React, { ElementType } from 'react'\nimport DropdownRB from 'react-bootstrap/Dropdown'\nimport DropdownButton from 'react-bootstrap/DropdownButton'\nimport { Item } from './interfaces'\nimport { ButtonVariant } from '../../interfaces'\n\ninterface Props {\n  /** Determines the dropdown toggle text */\n  text: string\n  /** Determines the dropdown's items */\n  items: Item[]\n  /** Determines the dropdown toggle button id */\n  id: string\n  /** Determines the dropdown toggle variant color */\n  variant: ButtonVariant\n  /** Determines the horizontal alignment of the dropdown items */\n  alignRight?: boolean\n  /** Determines the dropdown's custom element type */\n  as?: ElementType\n  /** Handle the dropdown toggle additional click events */\n  onClick?: (event: React.MouseEvent<any>) => void\n  /** Determines the dropdown toggle button size */\n  size?: 'sm' | 'md' | 'lg'\n  /** Determines the dropdown's direction */\n  direction?: 'down' | 'up' | 'left' | 'right'\n  /** Determines the dropdown's custom style */\n  style?: Record<string, any>\n}\n\n/**\n * Customizable dropdown component based on React-Bootstrap dropdown\n *\n */\nconst Dropdown = (props: Props) => {\n  const { text, size, id, items, direction, variant, style, alignRight } = props\n\n  const getDropdownItem = (item: Item, i: number) => (\n    <DropdownRB.Item\n      style={item.style}\n      key={item.key || `dropdown-item-${i.toString()}`}\n      eventKey={item.eventKey || `dropdown-event-${i.toString()}`}\n    >\n      {item.text}\n    </DropdownRB.Item>\n  )\n\n  return (\n    <DropdownButton\n      drop={direction}\n      size={size}\n      variant={variant}\n      title={text}\n      id={id}\n      style={style}\n      alignRight={alignRight}\n    >\n      {items.map((item, i) => getDropdownItem(item, i))}\n    </DropdownButton>\n  )\n}\nDropdown.defaultProps = {\n  id: `dropdown${Math.floor(Math.random() * 10000)}`,\n  variant: 'light',\n  size: 'sm',\n  direction: 'down',\n}\n\nexport { Dropdown }\n","import React, { CSSProperties } from 'react'\nimport BootstrapBadge from 'react-bootstrap/Badge'\nimport { ColorVariant } from '../../interfaces'\n\ninterface Props {\n  /** Defines the color of the badge. Defaults to primary. */\n  color?: ColorVariant\n  /** The children to render */\n  children?: React.ReactNode\n  /** Defines the class of the badge */\n  className?: string\n  /** Defines the style of the badge */\n  style?: CSSProperties\n}\n\n/**\n * Badges can provide contextual clues to the user by differentiating color and styling\n * from the surrounding content.\n */\nconst Badge = (props: Props) => {\n  const { color, children, className, style } = props\n  return (\n    <BootstrapBadge variant={color} className={className} style={style}>\n      {children}\n    </BootstrapBadge>\n  )\n}\n\nBadge.defaultProps = {\n  color: 'primary',\n}\n\nexport { Badge }\n","import React, { CSSProperties } from 'react'\nimport Badge from 'react-bootstrap/Badge'\nimport { ColorVariant } from '../../interfaces'\n\ninterface Props {\n  /** Defines the color of the pill. Defaults to primary. */\n  color?: ColorVariant\n  /** The children to render */\n  children?: React.ReactNode\n  /**\n   * Defines the class of the pill.\n   */\n  className?: string\n  /**\n   * Defines the style of the pill.\n   */\n  style?: CSSProperties\n}\n\n/**\n * Pills can provide contextual clues to the user by differentiating color and styling\n * from the surrounding content.\n */\nconst Pill = (props: Props) => {\n  const { color, children, className, style } = props\n  return (\n    <Badge pill variant={color} className={className} style={style}>\n      {children}\n    </Badge>\n  )\n}\n\nPill.defaultProps = {\n  color: 'primary',\n}\n\nexport { Pill }\n","import React, { CSSProperties } from 'react'\nimport FormCheck from 'react-bootstrap/FormCheck'\n\ninterface Props {\n  /** The id for the checkbox */\n  id?: string\n  /** The label to render next to the checkbox */\n  label: string\n  /* Determines the side of the checkbox to render the label on. By default right */\n  labelSide?: 'right' | 'left'\n  /** Gives the checkbox a name */\n  name?: string\n  /** Determines if the checkbox should be disabled or not. By default false */\n  disabled?: boolean\n  /** Determines if the checkbox should render inline or not. By default false. */\n  inline?: boolean\n  /** The onChange listener */\n  onChange?: (event: React.ChangeEvent<HTMLInputElement>) => void\n  /**\n   * Defines the class of the checkbox.\n   */\n  className?: string\n  /**\n   * Defines the style of the checkbox.\n   */\n  style?: CSSProperties\n  /**\n   * Defines the class of the checkbox.\n   */\n  labelClassName?: string\n  /**\n   * Defines the style of the checkbox.\n   */\n  labelStyle?: CSSProperties\n}\n\n/**\n * Checkbox is used to mark if something is true or not. Often times is used in a group where\n * multiple things can be true at one time.\n */\nconst Checkbox = (props: Props) => {\n  const {\n    id,\n    label,\n    name,\n    inline,\n    labelSide,\n    disabled,\n    onChange,\n    className,\n    style,\n    labelClassName,\n    labelStyle,\n  } = props\n\n  const getLabel = () => (\n    <FormCheck.Label htmlFor={id} className={labelClassName} style={labelStyle}>\n      {label}\n    </FormCheck.Label>\n  )\n\n  return (\n    <FormCheck name={name} inline={inline} className={className} style={style}>\n      {labelSide === 'left' && getLabel()}\n      <FormCheck.Input id={id} type=\"checkbox\" disabled={disabled} onChange={onChange} />\n      {labelSide === 'right' && getLabel()}\n    </FormCheck>\n  )\n}\n\nCheckbox.defaultProps = {\n  labelSide: 'right',\n}\n\nexport { Checkbox }\n","import React from 'react'\nimport NavbarRB from 'react-bootstrap/Navbar'\nimport Nav from 'react-bootstrap/Nav'\nimport Form from 'react-bootstrap/Form'\nimport FormControl from 'react-bootstrap/FormControl'\nimport NavDropdown from 'react-bootstrap/NavDropdown'\nimport { Button } from '../Button'\nimport { NavLink, NavIcon, NavHeader, NavLinkList, NavSearch } from './interfaces'\n\ninterface Props extends React.Props<any> {\n  /** Determines the navbar background color */\n  bg?: string\n  /** Determines the letters color. It should be combined with the background color (bg) */\n  variant?: 'light' | 'dark'\n  /** Determines the links names, theirs onClick methods and paths. It has children array which contain links to be used on a dropdown. */\n  navItems: (NavIcon | NavHeader | NavLink | NavLinkList | NavSearch)[]\n  /** Defines the class of the list. */\n  className?: string\n}\n\n/**\n * Used to redirect users to the main topics.\n */\nconst Navbar = (props: Props) => {\n  const { bg, variant, navItems, className } = props\n\n  const getNavListLink = (link: NavLink, index: number) => (\n    <NavDropdown.Item\n      className={link.className}\n      href={link.href ? link.href : ''}\n      key={index}\n      onClick={link.onClick}\n    >\n      {link.label}\n    </NavDropdown.Item>\n  )\n  const getNavSearch = (search: NavSearch, index: number) => (\n    <Nav className={search.className} key={index}>\n      <Form inline>\n        <FormControl\n          type=\"text\"\n          placeholder={search.placeholderText || 'Search'}\n          className=\"mr-sm-2\"\n          onChange={search.onChangeInput}\n        />\n        <Button color={search.buttonColor || 'primary'} onClick={search.onClickButton}>\n          {search.buttonText || 'Search'}\n        </Button>\n      </Form>\n    </Nav>\n  )\n  const getNavLinkList = (list: NavLinkList, index: number) => (\n    <NavDropdown\n      className={list.className}\n      title={list.label}\n      id=\"collasible-nav-dropdown\"\n      key={index}\n    >\n      {list.children.map((listLink, i) => getNavListLink(listLink, i))}\n    </NavDropdown>\n  )\n  const getNavHeader = (header: NavHeader, index: number) => (\n    <NavbarRB.Brand\n      className={header.className}\n      onClick={header.onClick}\n      style={{ cursor: 'pointer' }}\n      key={index}\n    >\n      <span style={{ color: header.color }}>{`${header.label}`}</span>\n    </NavbarRB.Brand>\n  )\n  const getNavIcon = (icon: NavIcon, index: number) => (\n    <NavbarRB.Brand\n      className={\n        icon.className\n          ? icon.className.concat(' ', 'd-inline-block align-top')\n          : 'd-inline-block align-top'\n      }\n      onClick={icon.onClick}\n      style={{ cursor: 'pointer' }}\n      key={index}\n    >\n      <img alt={icon.alt} src={icon.src} width=\"28\" height=\"28\" />\n    </NavbarRB.Brand>\n  )\n\n  const getNavLink = (link: NavLink, index: number) => (\n    <Nav.Link className={link.className} onClick={link.onClick} key={index}>\n      {link.label}\n    </Nav.Link>\n  )\n  return (\n    <NavbarRB bg={bg} variant={variant}>\n      <NavbarRB.Collapse id=\"responsive-navbar-nav\">\n        <Nav className={className} style={{ width: '100%' }}>\n          {navItems.map((item, index) => {\n            if ((item as NavHeader).type === 'header') {\n              return getNavHeader(item as NavHeader, index)\n            }\n            if ((item as NavIcon).type === 'icon') {\n              return getNavIcon(item as NavIcon, index)\n            }\n            if ((item as NavLink).type === 'link') {\n              return getNavLink(item as NavLink, index)\n            }\n            if ((item as NavSearch).type === 'search') {\n              return getNavSearch(item as NavSearch, index)\n            }\n            if ((item as NavLinkList).type === 'link-list') {\n              return getNavLinkList(item as NavLinkList, index)\n            }\n            return null\n          })}\n        </Nav>\n      </NavbarRB.Collapse>\n    </NavbarRB>\n  )\n}\n\nNavbar.defaultProps = {\n  bg: 'light',\n  variant: 'light',\n}\nexport { Navbar }\n","interface KeyValuePair {\n  key: string\n  value: any\n}\n\nconst sizes: KeyValuePair[] = [\n  { key: 'small', value: 'sm' },\n  { key: 'large', value: 'lg' },\n]\n\nexport function getControlSize(size: string | undefined): 'sm' | 'lg' | undefined {\n  const controlSize = sizes.find((s) => s.key === size)\n  return controlSize ? controlSize.value : undefined\n}\n","import React, { Component, ReactNode, CSSProperties } from 'react'\nimport BootstrapAlert from 'react-bootstrap/Alert'\nimport { ColorVariant } from '../../interfaces'\nimport { Button } from '../Button'\n\ninterface Props {\n  /**\n   * Defines the color of the alert. Defaults to primary.\n   * @default \"primary\"\n   */\n  color?: ColorVariant\n  /** Defines the title of the alert. */\n  title?: string\n  /** Defines the message of the alert. */\n  message?: ReactNode\n  /** Defines if the alert should be dismissible. Defaults to false. */\n  dismissible?: boolean\n  /**\n   * Defines the label of the close button if the alert is dismissible.\n   * @default \"Dismiss\"\n   * */\n  closeLabel?: string\n  /**\n   * Defines the class of the alert\n   */\n  className?: string\n  /**\n   * Defines the style of the alert\n   */\n  style?: CSSProperties\n  /**\n   * Defines the class of the close button\n   */\n  btnClassName?: string\n  /**\n   * Defines the style of the close button\n   */\n  btnStyle?: CSSProperties\n}\n\ninterface State {\n  show: boolean\n}\n\n/**\n * Alerts can provide contextual feedback messages for typical user actions\n * with the handful of available and flexible alert messages.\n */\n\nclass Alert extends Component<Props, State> {\n  constructor(props: Props) {\n    super(props)\n    this.state = {\n      show: true,\n    }\n  }\n\n  render() {\n    const {\n      color = 'primary',\n      title,\n      message,\n      dismissible = false,\n      closeLabel = 'Dismiss',\n      className,\n      style,\n      btnClassName,\n      btnStyle,\n    } = this.props\n\n    const { show } = this.state\n\n    if (show) {\n      return (\n        <BootstrapAlert\n          variant={color}\n          onClose={() => this.setState({ show: false })}\n          dismissible={dismissible}\n          closeLabel={closeLabel}\n          className={className}\n          style={style}\n        >\n          {title && <BootstrapAlert.Heading>{title}</BootstrapAlert.Heading>}\n          {message && <div>{message}</div>}\n          {dismissible && (\n            <>\n              <hr />\n              <div className=\"d-flex justify-content-end\">\n                <Button\n                  outlined\n                  onClick={() => this.setState({ show: false })}\n                  color={color}\n                  className={btnClassName}\n                  style={btnStyle}\n                >\n                  {closeLabel}\n                </Button>\n              </div>{' '}\n            </>\n          )}\n        </BootstrapAlert>\n      )\n    }\n    return <></>\n  }\n}\n\nexport { Alert }\n","import React, { CSSProperties } from 'react'\nimport Form from 'react-bootstrap/Form'\n\ninterface Props {\n  /** Defines the type of the input. Defaults to 'text' if not specified. */\n  type?: 'text' | 'number' | 'email' | 'password' | 'search' | 'tel' | 'url'\n  /** Defines the size of the input. Defaults to 'lg' */\n  size?: 'sm' | 'lg'\n  /** The value of the input */\n  value?: string\n  /** Handles the onChange event for the input */\n  onChange?: (e: React.ChangeEvent<HTMLInputElement>) => void\n  /** The name of the input */\n  name?: string\n  /** The id value of the input */\n  id?: string\n  /** The placeholder inside of the text input */\n  placeholder?: string\n  /** Defines whether the input should be disabled or not. Defaults to false. */\n  disabled?: boolean\n  /** Defines whether the input should display as invalid. Defaults to false. */\n  isInvalid?: boolean\n  /** Defines whether the input should display as valid. Defaults to false */\n  isValid?: boolean\n  /**\n   * Defines the class of the textinput.\n   */\n  className?: string\n  /**\n   * Defines the style of the textinput.\n   */\n  style?: CSSProperties\n}\n\n/**\n * A flexible text input as a wrapper around the React Bootstrap Form Control.\n */\n\nconst TextInput = (props: Props) => {\n  const {\n    type,\n    name,\n    id,\n    placeholder,\n    onChange,\n    disabled,\n    isInvalid,\n    isValid,\n    value,\n    size,\n    className,\n    style,\n  } = props\n\n  return (\n    <Form.Control\n      as=\"input\"\n      type={type}\n      name={name}\n      id={id}\n      placeholder={placeholder}\n      onChange={onChange}\n      disabled={disabled}\n      isInvalid={isInvalid}\n      isValid={isValid}\n      value={value}\n      size={size}\n      className={className}\n      style={style}\n    />\n  )\n}\n\nTextInput.defaultProps = {\n  type: 'text',\n}\n\nexport { TextInput }\n","import React, { ReactNode } from 'react'\nimport DatePicker, { registerLocale, setDefaultLocale } from 'react-datepicker'\nimport InputGroup from 'react-bootstrap/InputGroup'\nimport { enUS, ptBR } from 'date-fns/locale'\nimport { Icon } from '../Icon'\nimport 'react-datepicker/dist/react-datepicker.css'\n\nregisterLocale('enUS', enUS)\nregisterLocale('ptBR', ptBR)\n\nsetDefaultLocale('enUS')\n\ninterface Props {\n  /** Yield element as children. */\n  children?: ReactNode\n  /** The format for parsed and displayed dates. */\n  dateFormat?: string\n  /** The format for parsed and displayed dates in internal yeardropdown. */\n  dateFormatCalendar?: string\n  /** Disable datepicker. */\n  disabled?: boolean\n  /** Change selection for internal year/month dropdowns. */\n  dropdownMode: 'scroll' | 'select'\n  /** The end date of the initially selected date range. */\n  endDate?: Date\n  /** Exclude dates within the specific date range. */\n  excludeDates?: Date[]\n  /** Include dates within the specific date range. */\n  includeDates?: Date[]\n  /** Visualize calendar as inline element. */\n  inline?: boolean\n  /** Set datepicker locale. */\n  locale?: string\n  /** The maximum selectable date. */\n  maxDate?: Date\n  /** The maximum selectable time. */\n  maxTime?: Date\n  /** The minimum selectable date. */\n  minDate?: Date\n  /** The minimum selectable time. */\n  minTime?: Date\n  /** Show more months. */\n  monthsShown?: number\n  /** Input.Group class */\n  className?: string\n  /** Callback when date is changed. */\n  onChange: (date: Date, event: React.ChangeEvent<HTMLInputElement>) => void\n  /** Selected date value. */\n  selected?: Date\n  /** Selected date end. */\n  selectsEnd?: boolean\n  /** Selected date start. */\n  selectsStart?: boolean\n  /** Show dropdown list with all months. */\n  showMonthDropdown?: boolean\n  /** Enable time selection. */\n  showTimeSelect?: boolean\n  /** Show dropdown list with years. */\n  showYearDropdown?: boolean\n  /** Enable only time selection. */\n  showTimeSelectOnly?: boolean\n  /** The format for parsed and displayed time. */\n  timeFormat?: string\n  /** Configure timer intervals. */\n  timeIntervals?: number\n  /** Header over the time selector. */\n  timeCaption?: string\n  /** Enable and set text for today button. */\n  todayButton?: string\n  /** The beginning date of the initially selected date range. */\n  startDate?: Date\n  /** Visualize calendar as portal. */\n  withPortal?: boolean\n}\n\nconst DateTimePicker = (props: Props) => {\n  const {\n    children,\n    className,\n    dateFormat,\n    dateFormatCalendar,\n    disabled,\n    dropdownMode,\n    endDate,\n    excludeDates,\n    includeDates,\n    inline,\n    locale,\n    maxDate,\n    maxTime,\n    minDate,\n    minTime,\n    monthsShown,\n    onChange,\n    selected,\n    selectsEnd,\n    selectsStart,\n    showMonthDropdown,\n    showTimeSelect,\n    showYearDropdown,\n    showTimeSelectOnly,\n    timeFormat,\n    timeIntervals,\n    timeCaption,\n    todayButton,\n    startDate,\n    withPortal,\n  } = props\n\n  return (\n    <InputGroup className={className}>\n      <InputGroup.Prepend>\n        <InputGroup.Text>\n          <Icon icon=\"calendar\" />\n        </InputGroup.Text>\n      </InputGroup.Prepend>\n      <DatePicker\n        className=\"form-control\"\n        dateFormat={dateFormat}\n        dateFormatCalendar={dateFormatCalendar}\n        disabled={disabled}\n        dropdownMode={dropdownMode}\n        endDate={endDate}\n        excludeDates={excludeDates}\n        includeDates={includeDates}\n        inline={inline}\n        locale={locale}\n        maxDate={maxDate}\n        maxTime={maxTime}\n        minDate={minDate}\n        minTime={minTime}\n        monthsShown={monthsShown}\n        onChange={onChange}\n        selected={selected}\n        selectsEnd={selectsEnd}\n        selectsStart={selectsStart}\n        showMonthDropdown={showMonthDropdown}\n        showTimeSelect={showTimeSelect}\n        showYearDropdown={showYearDropdown}\n        showTimeSelectOnly={showTimeSelectOnly}\n        timeFormat={timeFormat}\n        timeIntervals={timeIntervals}\n        timeCaption={timeCaption}\n        todayButton={todayButton}\n        startDate={startDate}\n        withPortal={withPortal}\n      >\n        {children}\n      </DatePicker>\n    </InputGroup>\n  )\n}\n\nDateTimePicker.defaultProps = {\n  dateFormat: 'MM/dd/yyyy',\n  locale: 'enUS',\n  dateFormatCalendar: 'LLLL yyyy',\n  dropdownMode: 'scroll',\n  timeIntervals: 30,\n  withPortal: false,\n}\n\nexport { DateTimePicker }\n","import React, { CSSProperties } from 'react'\nimport FormLabel from 'react-bootstrap/FormLabel'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\n\ninterface Props {\n  /** Text to display in label */\n  text: string\n  /** Title of the label. */\n  title?: string // Use on required input labels to override default required title\n  /** Ties label to input  */\n  htmlFor?: string\n  /** Defines whether input is required. */\n  isRequired?: boolean\n  /**\n   * Defines the class of the label.\n   */\n  className?: string\n  /**\n   * Defines the style of the label.\n   */\n  style?: CSSProperties\n}\n/**\n *  Svg instead of asterisk to avoid asterisk being read by screenreaders\n *  hidden text to be read explaing the input is required incase the title attribute\n *  is not supported by the screen reader\n */\nconst asterisk = React.createElement('i', { style: { color: 'red' } }, [\n  <FontAwesomeIcon\n    icon=\"asterisk\"\n    key=\"asterisk\"\n    style={{ height: '7px', verticalAlign: 'top', marginLeft: '2px' }}\n  />,\n])\n/**\n * Labels are used to display text\n */\nconst Label = (props: Props) => {\n  const { text, htmlFor, isRequired, title, className, style } = props\n  /** Form label for required inputs */\n  if (isRequired) {\n    return (\n      <div>\n        <FormLabel\n          htmlFor={htmlFor}\n          title={title || 'This is a required input'}\n          className={className}\n          style={style}\n        >\n          {text}\n          {asterisk}\n        </FormLabel>\n      </div>\n    )\n  }\n  /** Default form label  */\n  return (\n    <FormLabel htmlFor={htmlFor} title={title} className={className} style={style}>\n      {text}\n    </FormLabel>\n  )\n}\nLabel.defaultProps = {\n  title: undefined,\n  htmlFor: undefined,\n}\nexport { Label }\n","import React from 'react'\nimport { IconType } from '../Icon/interfaces'\nimport { Button } from '../Button'\n\ninterface Props {\n  /** Tab label */\n  label: string\n  /** Whether tab is currently selected */\n  active?: boolean\n  /** Whether the tab is disabled */\n  disabled?: boolean\n  /** Handles the on click event for a tab */\n  onClick?: (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void\n\n  /** The icon to display */\n  icon?: IconType\n  /** Determines whether or not the icon should display on the left side or right side of the tab. By default is left */\n  iconLocation?: 'left' | 'right'\n}\n\nconst Tab = (props: Props) => {\n  const { label, onClick, active, icon, disabled, iconLocation } = props\n  const className = `nav-link btn-link ${active ? ' active' : ''} ${disabled ? ' disabled' : ''}`\n\n  return (\n    <li className=\"nav-item\" role=\"tab\">\n      <Button\n        style={{ borderBottomLeftRadius: 0, borderBottomRightRadius: 0 }}\n        color=\"link\"\n        className={className}\n        onClick={disabled ? undefined : onClick}\n        icon={icon}\n        iconLocation={iconLocation}\n      >\n        {label}\n      </Button>\n    </li>\n  )\n}\n\nTab.defaultProps = {\n  iconLocation: 'left',\n}\n\nexport { Tab }\n","import React, { useState } from 'react'\n\nimport { AsyncTypeahead } from 'react-bootstrap-typeahead'\n\ninterface Props {\n  id: string\n  searchAccessor: string\n  renderMenuItemChildren: (option: any) => React.ReactNode\n  onChange: (selected: any) => void\n  onSearch: (query: string) => Promise<any[]>\n  minLength?: number\n  placeholder?: string\n  value?: any\n  disabled?: boolean\n}\n\nconst Typeahead = (props: Props) => {\n  const [options, setOptions] = useState<any[]>([])\n  const [isLoading, setIsLoading] = useState<boolean>(false)\n  const {\n    id,\n    searchAccessor,\n    placeholder,\n    onSearch,\n    onChange,\n    renderMenuItemChildren,\n    minLength,\n    value,\n    disabled,\n  } = props\n\n  const search = async (query: string) => {\n    setIsLoading(true)\n    const results = await onSearch(query)\n    setOptions(results)\n    setIsLoading(false)\n  }\n\n  const selectedValues = []\n  if (value) {\n    selectedValues.push(value)\n  }\n\n  return (\n    <AsyncTypeahead\n      id={id}\n      labelKey={searchAccessor}\n      options={options}\n      placeholder={placeholder}\n      isLoading={isLoading}\n      minLength={minLength}\n      onSearch={search}\n      onChange={onChange}\n      renderMenuItemChildren={renderMenuItemChildren}\n      defaultSelected={selectedValues}\n      disabled={disabled}\n    />\n  )\n}\n\nTypeahead.defaultProps = {\n  minLength: 3,\n}\n\nexport { Typeahead }\n","import React from 'react'\nimport FullCalendar from '@fullcalendar/react'\nimport dayGridPlugin from '@fullcalendar/daygrid'\nimport interactionPlugin from '@fullcalendar/interaction'\nimport timeGridPlugin from '@fullcalendar/timegrid'\nimport { EventApi } from '@fullcalendar/core'\nimport Event from './interfaces'\n\nimport '@fullcalendar/core/main.css'\nimport '@fullcalendar/daygrid/main.css'\nimport '@fullcalendar/timegrid/main.css'\n\ntype View = 'day' | 'month' | 'week'\n\ninterface Props {\n  view: View\n  views: View[]\n  events: Event[]\n  disabled?: boolean\n  onDateClick?: (date: Date, allDay: boolean) => void\n  onDateRangeSelected?: (startDate: Date, endDate: Date, allDay: boolean) => void\n  onEventClick?: (event: Event) => void\n}\n\nconst viewToCalendarViewMap = {\n  month: 'dayGridMonth',\n  week: 'timeGridWeek',\n  day: 'timeGridDay',\n}\n\nconst getEventFromFullCalendarEventApi = (e: EventApi): Event => ({\n  id: e.id,\n  start: e.start,\n  end: e.end,\n  title: e.title,\n  allDay: e.allDay,\n})\n\nconst getCalendarViewFromViewProp = (view: View) => (viewToCalendarViewMap as any)[view]\n\nconst getViewsFromViewsProp = (views: View[]) => {\n  let viewsString = ''\n  views.forEach((view) => {\n    viewsString += `${getCalendarViewFromViewProp(view)},`\n  })\n\n  return viewsString.slice(0, viewsString.length - 1)\n}\n\nconst Calendar = (props: Props) => {\n  const { view, views, events, disabled, onDateClick, onDateRangeSelected, onEventClick } = props\n  const fullCalendarRef = React.createRef<FullCalendar>()\n  return (\n    <FullCalendar\n      events={events}\n      ref={fullCalendarRef}\n      selectable={!disabled}\n      header={{\n        left: 'prev,next today',\n        center: 'title',\n        right: getViewsFromViewsProp(views),\n      }}\n      defaultView={getCalendarViewFromViewProp(view)}\n      plugins={[dayGridPlugin, timeGridPlugin, interactionPlugin]}\n      themeSystem=\"bootstrap\"\n      dateClick={(arg) => {\n        if (onDateClick) {\n          onDateClick(arg.date, arg.allDay)\n        }\n      }}\n      select={(arg) => {\n        if (onDateRangeSelected) {\n          onDateRangeSelected(arg.start, arg.end, arg.allDay)\n        }\n      }}\n      eventClick={(arg) => {\n        if (onEventClick) {\n          onEventClick(getEventFromFullCalendarEventApi(arg.event))\n        }\n      }}\n    />\n  )\n}\n\nCalendar.defaultProps = {\n  view: 'week',\n  events: [],\n  views: ['day', 'week', 'month'],\n}\n\nexport { Calendar }\n","import { library } from '@fortawesome/fontawesome-svg-core'\nimport { fas } from '@fortawesome/free-solid-svg-icons'\n\nimport '../scss/main.scss'\n\nlibrary.add(fas)\nexport * from './components/Toaster'\nexport * from './components/Spinner'\nexport * from './components/Graph'\nexport * from './components/Button'\nexport * from './components/Dropdown'\nexport * from './components/Icon'\nexport * from './components/Image'\nexport * from './components/Badge'\nexport * from './components/Panel'\nexport * from './components/Pill'\nexport * from './components/Checkbox'\nexport * from './components/Navbar'\nexport * from './components/TextField'\nexport * from './components/Switch'\nexport * from './components/Radio'\nexport * from './components/Alert'\nexport * from './components/Modal'\nexport * from './components/TextInput'\nexport * from './components/Select'\nexport * from './components/RichText'\nexport * from './components/List'\nexport * from './components/DateTimePicker'\nexport * from './components/VideoPlayer'\nexport * from './components/Layout'\nexport * from './components/Label'\nexport * from './components/Breadcrumb'\nexport * from './components/Tab'\nexport * from './components/Typeahead'\nexport * from './components/Calendar'\n","import React, { CSSProperties } from 'react'\nimport BootstrapBreadcrumb from 'react-bootstrap/Breadcrumb'\n\ninterface Props {\n  /** The children to render */\n  children?: React.ReactNode\n  /**\n   * Defines the class of the breadcrumb.\n   */\n  className?: string\n  /**\n   * Defines the style of the breadcrumb.\n   */\n  style?: CSSProperties\n}\nconst Breadcrumb = (props: Props) => {\n  const { children, className, style } = props\n\n  return (\n    <BootstrapBreadcrumb className={className} style={style}>\n      {children}\n    </BootstrapBreadcrumb>\n  )\n}\n\nexport { Breadcrumb }\n","import React, { CSSProperties } from 'react'\nimport BootstrapBreadcrumbItem from 'react-bootstrap/BreadcrumbItem'\n\ninterface Props {\n  /** The children to render */\n  children?: React.ReactNode\n  /** Adds active class and renders wraps children in span */\n  active?: boolean\n  /** Adds custom event */\n  onClick?: (event: React.MouseEvent) => void\n  /**\n   * Defines the class of the Breadcrumb Item.\n   */\n  className?: string\n  /**\n   * Defines the style of the Breadcrumb Item.\n   */\n  style?: CSSProperties\n}\n\nconst BreadcrumbItem = ({ children, active, onClick, className, style }: Props) => (\n  <BootstrapBreadcrumbItem active={active} onClick={onClick} className={className} style={style}>\n    {children}\n  </BootstrapBreadcrumbItem>\n)\n\nexport { BreadcrumbItem }\n","import React, { CSSProperties } from 'react'\nimport BoostrapColumn from 'react-bootstrap/Col'\n\ninterface Props {\n  /**\n   * HTML element to be used for the component\n   * @default <div>\n   */\n  as?: React.ElementType\n  /**\n   * The number of columns to span on extra large devices (≥ 1200px)\n   */\n  xl?: true | 'auto' | number | { span?: true | 'auto' | number; offset?: number; order?: number }\n  /**\n   * The number of columns to span on large devices (≥ 992px)\n   */\n  lg?: true | 'auto' | number | { span?: true | 'auto' | number; offset?: number; order?: number }\n  /**\n   * The number of columns to span on medium devices (≥ 768px)\n   */\n  md?: true | 'auto' | number | { span?: true | 'auto' | number; offset?: number; order?: number }\n  /**\n   * The number of columns to span on small devices (≥ 576px)\n   */\n  sm?: true | 'auto' | number | { span?: true | 'auto' | number; offset?: number; order?: number }\n  /**\n   * The number of columns to span on extra small devices (< 576px)\n   */\n  xs?: true | 'auto' | number | { span?: true | 'auto' | number; offset?: number; order?: number }\n  /**\n   * `ReactNode` elements to be wrapped in the component\n   */\n  children?: React.ReactNode\n  /**\n   * Defines the class of the column.\n   */\n  className?: string\n  /**\n   * Defines the style of the column.\n   */\n  style?: CSSProperties\n}\n\nconst Column = (props: Props) => {\n  const { as, lg, md, sm, xl, xs, children, className, style } = props\n\n  return (\n    <BoostrapColumn\n      as={as}\n      lg={lg}\n      md={md}\n      sm={sm}\n      xl={xl}\n      xs={xs}\n      className={className}\n      style={style}\n    >\n      {children}\n    </BoostrapColumn>\n  )\n}\n\nexport { Column }\n","import React, { CSSProperties } from 'react'\nimport BootstrapContainer from 'react-bootstrap/Container'\n\ninterface Props {\n  /**\n   * A custom element to be used for the component\n   * @default <div>\n   */\n  as?: React.ElementType\n  /**\n   * Allow the Container to fill all of its available horizontal space\n   * @default false\n   */\n  fluid?: boolean\n  /**\n   * A custom class to be used for the component\n   */\n  className?: string\n  /**\n   * `ReactNode` elements to be wrapped in the component\n   */\n  children?: React.ReactNode\n  /**\n   * Defines the style of the container.\n   */\n  style?: CSSProperties\n}\n\nconst Container = (props: Props) => {\n  const { as, fluid, className, children, style } = props\n\n  return (\n    <BootstrapContainer as={as} fluid={fluid} className={className} style={style}>\n      {children}\n    </BootstrapContainer>\n  )\n}\n\nexport { Container }\n","import React from 'react'\nimport BootstrapImage from 'react-bootstrap/Image'\n\ninterface Props extends React.ImgHTMLAttributes<HTMLImageElement> {\n  /** Determines if the image should should shrink to fit the parent's width. By default false. */\n  fluid?: boolean\n  /** Determines if the image should have rounded edges. By default false. */\n  rounded?: boolean\n  /** Determines if the image should be circular. By default false. */\n  circle?: boolean\n  /** The source of the image to display. */\n  src: string\n}\n\n/**\n * Image used to display imagery in various shapes\n */\nconst Image = (props: Props) => {\n  const { circle, fluid, rounded, src, ...imgAttributes } = props\n  return (\n    <BootstrapImage\n      fluid={fluid}\n      rounded={rounded}\n      roundedCircle={circle}\n      src={src}\n      {...imgAttributes}\n    />\n  )\n}\n\nexport { Image }\n","import React, { CSSProperties } from 'react'\nimport ListGroup from 'react-bootstrap/ListGroup'\n\ninterface Props {\n  /** Removes outer borders and rounded corners to render list group items edge-to-edge in a parent container. */\n  layout?: 'flush'\n  /** The children to render */\n  children?: React.ReactNode\n  /**\n   * Defines the class of the list.\n   */\n  className?: string\n  /**\n   * Defines the style of the list.\n   */\n  style?: CSSProperties\n}\n\n/**\n * Lists are a flexible and powerful component for displaying a\n * series of content. Modify and extend them to support just about any\n * content within.\n */\nconst List = (props: Props) => {\n  const { layout, children, className, style } = props\n\n  return (\n    <ListGroup variant={layout} className={className} style={style}>\n      {children}\n    </ListGroup>\n  )\n}\n\nexport { List }\n","import React, { CSSProperties } from 'react'\nimport ListGroupItem from 'react-bootstrap/ListGroupItem'\nimport { ColorVariant } from '../../interfaces'\n\ninterface Props {\n  /** Defines the color of the list item. */\n  color?: ColorVariant\n  /** Applies additional hover, active and disabled styles to the list item. */\n  action?: boolean\n  /** Indicates the list group's current active selection. */\n  active?: boolean\n  /** Prevents actions on a list item. */\n  disabled?: boolean\n  /** The link value for a list item. */\n  href?: string\n  /** The link value for a list item. */\n  eventKey?: string\n  /** Handles the on click event for a list item. */\n  onClick?: (event: React.MouseEvent) => void\n  /** The children to render. */\n  children?: React.ReactNode\n  /**\n   * Defines the class of the listitem.\n   */\n  className?: string\n  /**\n   * Defines the style of the listitem.\n   */\n  style?: CSSProperties\n}\n\n/**\n * ListItem components display the child elements of List components and support flexible layout, style, and interactivity options.\n */\nconst ListItem = (props: Props) => {\n  const { color, action, active, disabled, href, onClick, children, className, style } = props\n\n  return (\n    <ListGroupItem\n      variant={color}\n      action={action}\n      active={active}\n      disabled={disabled}\n      href={href}\n      onClick={onClick}\n      className={className}\n      style={style}\n    >\n      {children}\n    </ListGroupItem>\n  )\n}\n\nexport { ListItem }\n","import React, { ReactNode } from 'react'\nimport BootstrapModal from 'react-bootstrap/Modal'\nimport { Button, Props as ButtonProps } from '../Button'\nimport { ButtonsAlignment } from './interfaces'\n\ninterface Props {\n  /** Defines if the modal should be visible. */\n  show: boolean\n  /** Toggles the modal visibility. */\n  toggle(): void\n  /** Defines the title of the modal. */\n  title?: string\n  /** Defines the body of the modal. */\n  body?: ReactNode\n  /**\n   * Renders a close button in modal header.\n   * @default true\n   * */\n  showHeaderCloseButton?: boolean\n  /**\n   * Defines if the modal should be vertically centered.\n   * @default false\n   * */\n  verticallyCentered?: boolean\n  /**\n   * Defines the buttons alignment.\n   * @default \"edges\"\n   * */\n  buttonsAlignment?: ButtonsAlignment\n  /**\n   * Optional close button properties.\n   * */\n  closeButton?: ButtonProps\n  /**\n   * Optional middle button properties.\n   * */\n  middleButton?: ButtonProps\n  /**\n   * Optional success button properties.\n   * */\n  successButton?: ButtonProps\n}\n\n/**\n * Add dialogs for lightboxes, user notifications, or completely custom content.\n */\n\nconst Modal = (props: Props) => {\n  const {\n    show,\n    toggle,\n    title,\n    body,\n    verticallyCentered,\n    buttonsAlignment,\n    showHeaderCloseButton,\n    closeButton,\n    middleButton,\n    successButton,\n  } = props\n\n  return (\n    <BootstrapModal\n      autoFocus\n      centered={verticallyCentered}\n      keyboard\n      restoreFocus\n      show={show}\n      onHide={() => toggle()}\n    >\n      {(showHeaderCloseButton === false ? title : true) && (\n        <BootstrapModal.Header closeButton={showHeaderCloseButton !== false}>\n          {title && <BootstrapModal.Title>{title}</BootstrapModal.Title>}\n        </BootstrapModal.Header>\n      )}\n      {body && <BootstrapModal.Body>{body}</BootstrapModal.Body>}\n      <BootstrapModal.Footer\n        style={{\n          justifyContent:\n            buttonsAlignment === 'left'\n              ? 'flex-start'\n              : buttonsAlignment === 'right'\n              ? 'flex-end'\n              : buttonsAlignment === 'center'\n              ? 'center'\n              : 'space-between',\n        }}\n      >\n        {closeButton && (\n          <Button {...closeButton} color={closeButton.color || 'secondary'}>\n            {closeButton.children || 'Close'}\n          </Button>\n        )}\n        {middleButton && (\n          <Button {...middleButton} color={middleButton.color || 'info'}>\n            {middleButton.children || 'Retry'}\n          </Button>\n        )}\n        {successButton && (\n          <Button {...successButton} color={successButton.color || 'primary'}>\n            {successButton.children || 'Confirm'}\n          </Button>\n        )}\n      </BootstrapModal.Footer>\n    </BootstrapModal>\n  )\n}\n\nexport { Modal }\n","import React, { useState } from 'react'\nimport { Card, Collapse } from 'react-bootstrap'\nimport { Icon } from '../Icon'\nimport { ColorVariant } from '../../interfaces'\n\ninterface Props {\n  /** Defines the color of the panel */\n  color?: ColorVariant\n  /** The body for the panel */\n  children?: React.ReactNode\n  /** The title for the panel */\n  title?: string\n  /** The footer for the panel */\n  footer?: string\n  /** Determines if the panel can be collapsible */\n  collapsible?: boolean\n  /** Determines if the panel should be collapsed */\n  collapsed?: boolean\n  /** The className for the panel card parent element */\n  className?: string\n}\n\nconst Panel = (props: Props) => {\n  const { color, children, footer, title, collapsible, collapsed, className } = props\n  const [open, setOpen] = useState(!collapsed || !collapsible)\n\n  const collapseIcon = (\n    <span style={{ float: 'right', cursor: 'pointer' }}>\n      <Icon\n        icon={open ? 'up-arrow' : 'down-arrow'}\n        onClick={() => setOpen(!open)}\n        aria-controls=\"collapse-body\"\n        aria-expanded={open}\n      />\n    </span>\n  )\n\n  return (\n    <Card className={className} border={color}>\n      {title && (\n        <Card.Header\n          style={collapsible ? { cursor: 'pointer', textAlign: 'left' } : { textAlign: 'left' }}\n          onClick={() => collapsible && setOpen(!open)}\n        >\n          {title}\n          {collapsible && collapseIcon}\n        </Card.Header>\n      )}\n      <Card.Body style={{ textAlign: 'left' }}>\n        {collapsible && !title && collapseIcon}\n        <Collapse in={open}>\n          <div id=\"collapse-body\">{children}</div>\n        </Collapse>\n      </Card.Body>\n      {footer && (\n        <Card.Footer style={{ textAlign: 'left', fontSize: 'smaller' }}>{footer}</Card.Footer>\n      )}\n    </Card>\n  )\n}\n\nexport { Panel }\n","import React, { ReactNode, CSSProperties } from 'react'\nimport { FormCheck } from 'react-bootstrap'\n\ninterface Props {\n  /** Label to display next to the Radio. */\n  label?: string | ReactNode\n  /** Necessary to link the label with the input. */\n  id?: string\n  /** Name to group Radios together. Two Radios with the same name can't be checked at the same time. */\n  name?: string\n  /** Value associated with the Radio. */\n  value?: string\n  /** When inline, Radio elements are stacked horizontally instead of vertically. Default is false. */\n  inline?: boolean\n  /** When disabled, the Radio cannot be clicked or changed by the user. Default is false. */\n  disabled?: boolean\n  /** When checked is true, the Radio button is selected. */\n  checked?: boolean\n  /** Determines whether the Radio should be rendered as invalid or not. Default is false. */\n  isInvalid?: boolean\n  /** Message to display when the Radio is invalid. */\n  feedback?: string | ReactNode\n  /** Listener will be called when the Radio is checked. */\n  onChange?: (event: React.ChangeEvent<HTMLInputElement>) => void\n  /**\n   * Defines the class of the radio.\n   */\n  className?: string\n  /**\n   * Defines the style of the radio.\n   */\n  style?: CSSProperties\n}\n\nconst Radio = (props: Props) => {\n  const {\n    label,\n    name,\n    id,\n    value,\n    checked,\n    disabled,\n    inline,\n    isInvalid,\n    feedback,\n    onChange,\n    className,\n    style,\n  } = props\n  return (\n    <FormCheck\n      type=\"radio\"\n      label={label}\n      name={name}\n      id={id}\n      value={value}\n      checked={checked}\n      disabled={disabled}\n      inline={inline}\n      isInvalid={isInvalid}\n      feedback={feedback}\n      onChange={onChange}\n      className={className}\n      style={style}\n    />\n  )\n}\n\nexport { Radio }\n","import React from 'react'\nimport { Editor } from '@tinymce/tinymce-react'\n\nimport 'tinymce/tinymce'\n\n// Basic tinyMCE theme & skins required for editor to display\nimport 'tinymce/themes/silver/theme.min'\nimport 'tinymce/skins/ui/oxide/skin.min.css'\nimport 'tinymce/skins/ui/oxide/content.min.css'\n\n// Import required plugins\nimport 'tinymce/plugins/autolink/plugin.min'\nimport 'tinymce/plugins/lists/plugin.min'\nimport 'tinymce/plugins/link/plugin.min'\nimport 'tinymce/plugins/table/plugin.min'\nimport 'tinymce/plugins/paste/plugin.min'\nimport 'tinymce/plugins/charmap/plugin.min'\n\ninterface Props {\n  /**\n   * id of the rich text editor component\n   * @default \"\"\n   */\n  id?: string\n  /**\n   *  Initial value of the rich text editor\n   * @default \"\"\n   */\n  value?: string\n  /**\n   * Defines whether the rich text editor should be enabled/disabled (default = false)\n   * @default false\n   */\n  disabled?: boolean\n  /**\n   * Height of the rich text editor\n   * @default 500\n   */\n  height?: number\n  /**\n   * Method run on the editors onEditorChange event. Returns editor content as HTML.\n   * @default null\n   */\n  onChange?: (event: React.KeyboardEvent<HTMLTextAreaElement>) => void\n}\n\nconst RichText = (props: Props) => {\n  const { id, value, disabled, height, onChange } = props\n\n  return (\n    <Editor\n      id={id}\n      initialValue={value}\n      init={{\n        height: height || 500,\n        menubar: true,\n        statusbar: false,\n        // skin & content_css are set to 'false' to avoid tinyMCE looking to fetch files when they are already imported above.\n        skin: false,\n        // eslint disabled on next line due to TinyMCE option attribute naming.\n        // eslint-disable-next-line @typescript-eslint/camelcase\n        content_css: false,\n        plugins: [`autolink lists link table paste charmap`],\n        toolbar: [\n          `undo redo | formatselect fontselect fontsizeselect | bold italic underline sub sup backcolor |\n        alignleft aligncenter alignright alignjustify | bullist numlist outdent indent | table link removeformat`,\n        ],\n        branding: false,\n      }}\n      disabled={disabled}\n      onEditorChange={(content) => onChange && onChange(content)}\n    />\n  )\n}\n\nexport { RichText }\n","import React, { CSSProperties } from 'react'\nimport BootstrapRow from 'react-bootstrap/Row'\n\ninterface Props {\n  /**\n   * HTML element to be used for the component\n   * @default <div>\n   */\n  as?: React.ElementType\n  /**\n   * Removes the gutter spacing between `Columns` as well as any added negative margins.\n   * @default false\n   */\n  noGutters?: boolean\n  /**\n   * A custom CSS class to be used for the component\n   */\n  className?: string\n  /**\n   * `ReactNode` elements to be wrapped in the component\n   */\n  children?: React.ReactNode\n  /**\n   * Defines the style of the row.\n   */\n  style?: CSSProperties\n}\n\nconst Row = (props: Props) => {\n  const { as, noGutters, className, children, style } = props\n\n  return (\n    <BootstrapRow as={as} noGutters={noGutters} className={className} style={style}>\n      {children}\n    </BootstrapRow>\n  )\n}\n\nexport { Row }\n","import React, { CSSProperties } from 'react'\nimport { FormControl } from 'react-bootstrap'\nimport { getControlSize } from '../../helpers/controlSize'\n\ninterface Props {\n  /** When multiple is true, the user can select multiple options. Otherwise, one option only. False by default. */\n  multiple?: boolean\n  /** Determines whether the Select should be disabled. False by default. */\n  disabled?: boolean\n  /** Determines whether the Select should be invalid. False by default. */\n  isInvalid?: boolean\n  /** Determines whether to render a small or large TextField. By default, it is undefined. */\n  size?: 'small' | 'large'\n  /** Selected value in the  */\n  value?: string\n\n  /** Handles the onChange event for the Select. */\n  onChange?: (event: React.ChangeEvent<HTMLSelectElement>) => void\n  /** The children to render */\n  children?: React.ReactNode\n  /**\n   * Defines the class of the select.\n   */\n  className?: string\n  /**\n   * Defines the style of the select.\n   */\n  style?: CSSProperties\n}\n\nconst Select = (props: Props) => {\n  const { value, multiple, isInvalid, disabled, size, onChange, children, className, style } = props\n\n  return (\n    <FormControl\n      as=\"select\"\n      value={value}\n      multiple={multiple}\n      isInvalid={isInvalid}\n      disabled={disabled}\n      size={getControlSize(size)}\n      onChange={onChange}\n      className={className}\n      style={style}\n    >\n      {children}\n    </FormControl>\n  )\n}\n\nexport { Select }\n","/* eslint react/jsx-props-no-spreading: \"off\" */\nimport React from 'react'\nimport * as Spinners from 'react-spinners'\nimport { SpinnerType, SpinnerSizeUnit } from './interfaces'\nimport * as strings from './strings'\n\ninterface Props {\n  /** The type of spinner to render */\n  type: SpinnerType\n  /** This prop tells Spinner when to show itself. It should be linked to something dynamic, like a property in the parent component's state. */\n  loading: boolean\n  /** Choose the spinner color. */\n  color?: string\n  /** Adds a margin to the Spinner component. */\n  margin?: string\n  /**\n   * Declares the size of the spinner. If you choose to declare it, in the following spinners it must be an array of two numbers (for width & height):\n   * BarLoader, FadeLoader, ScaleLoader\n   */\n  size?: number | [number, number]\n  /**\n   * Declares the unit of measure for the previous size parameter. If you choose to declare it, in the following spinners it must be an array of two strings (respectively for width & height):\n   * BarLoader, FadeLoader, ScaleLoader\n   */\n  sizeUnit?: SpinnerSizeUnit | [SpinnerSizeUnit, SpinnerSizeUnit]\n}\n\n/**\n * A customizable spinner component. It's a wrapper component built upon react-spinners.\n */\nconst Spinner = (props: Props) => {\n  const { loading, color, margin, size, sizeUnit, type } = props\n\n  const commonStyles = {\n    loading,\n    color: color || 'grey',\n    margin: margin || '2px',\n  }\n\n  const loaderStyles1 = {\n    ...commonStyles,\n    size: size ? (size as number) : 15,\n    sizeUnit: sizeUnit ? (sizeUnit as SpinnerSizeUnit) : 'px',\n  }\n\n  const loaderStyles2 = {\n    ...commonStyles,\n    width: size ? (size as [number, number])[0] : 5,\n    height: size ? (size as [number, number])[1] : 15,\n    widthUnit: sizeUnit ? (sizeUnit as [SpinnerSizeUnit, SpinnerSizeUnit])[0] : 'px',\n    heightUnit: sizeUnit ? (sizeUnit as [SpinnerSizeUnit, SpinnerSizeUnit])[1] : 'px',\n  }\n\n  switch (type) {\n    case 'BarLoader':\n      return <Spinners.BarLoader {...loaderStyles2} />\n    case 'BeatLoader':\n      return <Spinners.BeatLoader {...loaderStyles1} />\n    case 'BounceLoader':\n      return <Spinners.BounceLoader {...loaderStyles1} />\n    case 'ClimbingBoxLoader':\n      return <Spinners.ClimbingBoxLoader {...loaderStyles1} />\n    case 'ClipLoader':\n      return <Spinners.ClipLoader {...loaderStyles1} />\n    case 'DotLoader':\n      return <Spinners.DotLoader {...loaderStyles1} />\n    case 'FadeLoader':\n      return <Spinners.FadeLoader {...loaderStyles2} />\n    case 'PulseLoader':\n      return <Spinners.PulseLoader {...loaderStyles1} />\n    case 'RotateLoader':\n      return <Spinners.RotateLoader {...loaderStyles1} />\n    case 'ScaleLoader':\n      return <Spinners.ScaleLoader {...loaderStyles2} />\n    case 'SyncLoader':\n      return <Spinners.SyncLoader {...loaderStyles1} />\n    default:\n      return <div>{strings.invalidSpinner}</div>\n  }\n}\n\nexport { Spinner }\n","export const invalidSpinner = 'Invalid spinner'\n","import React, { CSSProperties } from 'react'\nimport FormCheck from 'react-bootstrap/FormCheck'\n\ninterface Props {\n  /** The id for the switch element */\n  id: string\n  /** The label to render next to the switch */\n  label: string\n  /** Determines if the switch should be disabled or not. By default false */\n  disabled?: boolean\n  /** The onChange listener */\n  onChange?: (event: React.ChangeEvent<HTMLInputElement>) => void\n  /**\n   * Defines the class of the switch.\n   */\n  className?: string\n  /**\n   * Defines the style of the switch.\n   */\n  style?: CSSProperties\n}\n\n/**\n * Switches are used to choose if something is true or false\n */\nconst Switch = (props: Props) => {\n  const { id, label, disabled, onChange, className, style } = props\n  return (\n    <div>\n      <FormCheck\n        type=\"switch\"\n        id={id}\n        label={label}\n        disabled={disabled}\n        onChange={onChange}\n        className={className}\n        style={style}\n      />\n    </div>\n  )\n}\n\nexport { Switch }\n","import React from 'react'\n\ninterface Props {\n  /** The children to render */\n  children?: React.ReactNode\n}\n\nconst TabsHeader = (props: Props) => {\n  const { children } = props\n\n  return (\n    <ul className=\"nav nav-tabs\" role=\"tablist\">\n      {children}\n    </ul>\n  )\n}\n\nexport { TabsHeader }\n","import React, { CSSProperties } from 'react'\nimport Form from 'react-bootstrap/Form'\nimport { getControlSize } from '../../helpers/controlSize'\n\ninterface Props {\n  /** Determines whether the TextField should be disabled or not. By default, it is false. */\n  disabled?: boolean\n  /** Determines whether the TextField should be rendered as invalid or not. By default, it is false. */\n  isInvalid?: boolean\n  /** The name of the text field */\n  name?: string\n  /** The number of rows to render */\n  rows?: number\n  /** Determines whether to render a small or large TextField. By default, it is undefined. */\n  size?: 'small' | 'large'\n  /** The value of the text field */\n  value?: string\n\n  /** Handles the onChange event for the TextField */\n  onChange?: (event: React.ChangeEvent<HTMLTextAreaElement>) => void\n  /**\n   * Defines the class of the textfield.\n   */\n  className?: string\n  /**\n   * Defines the style of the textfield.\n   */\n  style?: CSSProperties\n}\n\n/**\n * A customizable text field component. It's a wrapper component built upon react's form controls.\n */\nconst TextField = (props: Props) => {\n  const { disabled, isInvalid, name, rows, size, value, onChange, className, style } = props\n\n  return (\n    <Form.Control\n      as=\"textarea\"\n      disabled={disabled}\n      isInvalid={isInvalid}\n      name={name}\n      rows={rows}\n      size={getControlSize(size)}\n      value={value}\n      onChange={onChange}\n      className={className}\n      style={style}\n    />\n  )\n}\n\nexport { TextField }\n","import * as React from 'react'\nimport { ToastContainer, toast, Slide } from 'react-toastify'\nimport { ToastProps, ToasterProps } from './interfaces'\nimport { titleWithMessage, titleWithoutMessage } from './components'\nimport './toaster.scss'\n\nexport const Toast: any = (\n  type: ToastProps['type'],\n  title: ToastProps['title'],\n  message?: ToastProps['message'],\n) => {\n  const messageToShow = message ? titleWithMessage(title, message) : titleWithoutMessage(title)\n  let toastToShow\n\n  switch (type) {\n    case 'error':\n      toast.error(messageToShow)\n      break\n    case 'info':\n      toast.info(messageToShow)\n      break\n    case 'success':\n      toast.success(messageToShow)\n      break\n    case 'warning':\n      toast.warn(messageToShow)\n      break\n    default:\n      toast.error(messageToShow)\n  }\n\n  return toastToShow\n}\n\nexport const Toaster = (props: ToasterProps) => {\n  const { autoClose, hideProgressBar, draggable } = props\n\n  return (\n    <ToastContainer\n      autoClose={autoClose || 5000}\n      hideProgressBar={hideProgressBar !== false}\n      draggable={draggable !== false}\n      transition={Slide}\n      draggablePercent={35}\n    />\n  )\n}\n","import * as React from 'react'\nimport { ToastProps } from './interfaces'\n\nexport const titleWithMessage = (title: ToastProps['title'], message: ToastProps['message']) => (\n  <>\n    <div className=\"titles\" style={{ fontSize: '1.1em', fontWeight: 600 }}>\n      {title}\n    </div>\n    <div>{message}</div>\n  </>\n)\n\nexport const titleWithoutMessage = (title: ToastProps['title']) => <div>{title}</div>\n","import React from 'react'\nimport { Player } from 'video-react'\nimport 'video-react/dist/video-react.css'\n\ninterface Props {\n  /**\n   * The URL of the video to embed. This is optional.\n   * You may instead use the <source> element within <Player> to specify the video to embed.\n   */\n  src?: string\n  /**\n   * A URL indicating a poster frame to show until the user plays or seeks.\n   * If this attribute isn't specified, nothing is displayed until the first frame is available; then the first frame is shown as the poster frame.\n   */\n  poster?: string\n  /**\n   * This enumerated attribute is intended to provide a hint to the browser about what the author thinks will lead to the best user experience.\n   * It may have one of the following values:\n   * - auto: indicates that the whole video file could be downloaded, even if the user is not expected to use it.\n   * - empty string: synonym of the auto value.\n   * - none: indicates that the video should not be preloaded.\n   * - metadata: indicates that only video metadata (e.g. length) is fetched.\n   */\n  preload?: 'auto' | '' | 'none' | 'metadata'\n  /**\n   * In `fluid` mode, player is 100% wide all the time, the height will be calculated by the video's ratio.\n   * @default true\n   */\n  fluid?: boolean\n  /**\n   * The width of <Player> element, could be an number or percent or auto.\n   * (This attribute is effective only if you set `fluid` as false)\n   */\n  width?: number\n  /**\n   * The height of <Player> element, could be an number or percent or auto.\n   * (This attribute is effective only if you set `fluid` as false)\n   */\n  height?: number\n  /**\n   * Indicates the default setting of the audio contained in the video. If set, the audio will be initially silenced.\n   * Its default value is false, meaning that the audio will be played when the video is played.\n   * @default false\n   */\n  muted?: boolean\n  /**\n   * [iOS only] Determines whether HTML5 videos play inline or use the native full-screen controller.\n   * @default false\n   */\n  playsInline?: boolean\n  /**\n   * The aspect ratio is the width of the video divided by its height.\n   * Posible values: \"auto\", \"16:9\", \"4:3\", etc.\n   * @default \"auto\"\n   */\n  aspectRatio?: string\n  /**\n   * If specified, the video automatically begins to play back as soon as it can do so without stopping to finish loading the data.\n   * @default false\n   */\n  autoPlay?: boolean\n  /**\n   * Seek the Video at A Specific Time On Load\n   */\n  startTime?: number\n  children?: React.ReactNode\n}\n\nconst VideoPlayer = (props: Props) => {\n  const {\n    src,\n    poster,\n    preload,\n    fluid,\n    width,\n    height,\n    muted,\n    playsInline,\n    aspectRatio,\n    autoPlay,\n    startTime,\n    children,\n  } = props\n\n  return (\n    <Player\n      src={src}\n      poster={poster}\n      preload={preload}\n      fluid={fluid}\n      width={width}\n      height={height}\n      muted={muted}\n      playsInline={playsInline}\n      aspectRatio={aspectRatio}\n      autoPlay={autoPlay}\n      startTime={startTime}\n    >\n      {children}\n    </Player>\n  )\n}\n\nexport { VideoPlayer }\n"],"names":["getAxisLabel","item","display","label","labelString","axisMapper","type","axis","scaleLabel","ticks","beginAtZero","time","unit","timeFormat","stepSize","timeStepSize","getAxes","axes","stacked","chartAxes","map","forEach","getChartDataset","dataset","data","backgroundColor","borderColor","d","push","y","background","border","undefined","pointBackgroundColor","pointBorderColor","borderWidth","getChartDatasets","datasets","getLabelsFromDataset","labels","includes","x","getChartData","getCommonChartOptions","title","titleFontSize","titleFontColor","options","text","fontSize","fontColor","getCommonChartConfigurations","BarGraph","props","graph","chart","componentDidMount","scales","this","horizontal","xAxes","yAxes","isStacked","config","util","ChartJs","render","React","ref","_this2","Component","LineGraph","fill","isFill","i","length","PieGraph","doughnut","iconMap","add","admin","appointment","calendar","dashboard","edit","image","incident","lab","medication","patient","patients","remove","save","setting","Icon","icon","FontAwesomeIcon","onClick","className","style","Button","size","iconLocation","children","iconClassName","iconStyle","displayIconRight","variant","color","outlined","BootstrapButton","block","disabled","defaultProps","Dropdown","DropdownButton","drop","direction","id","alignRight","items","DropdownRB","Item","key","toString","eventKey","getDropdownItem","Math","floor","random","Badge","BootstrapBadge","Pill","pill","Checkbox","labelSide","onChange","labelClassName","labelStyle","getLabel","FormCheck","Label","htmlFor","name","inline","Input","Navbar","NavbarRB","bg","Collapse","Nav","width","navItems","index","header","Brand","cursor","getNavHeader","concat","alt","src","height","getNavIcon","link","Link","getNavLink","search","Form","FormControl","placeholder","placeholderText","onChangeInput","buttonColor","onClickButton","buttonText","getNavSearch","list","NavDropdown","listLink","href","getNavListLink","getNavLinkList","sizes","value","getControlSize","controlSize","find","s","Alert","state","show","message","dismissible","closeLabel","btnClassName","btnStyle","BootstrapAlert","onClose","setState","Heading","TextInput","Control","as","isInvalid","isValid","registerLocale","enUS","ptBR","setDefaultLocale","DateTimePicker","dateFormat","dateFormatCalendar","dropdownMode","endDate","excludeDates","includeDates","locale","maxDate","maxTime","minDate","minTime","monthsShown","selected","selectsEnd","selectsStart","showMonthDropdown","showTimeSelect","showYearDropdown","showTimeSelectOnly","timeIntervals","timeCaption","todayButton","startDate","withPortal","InputGroup","Prepend","Text","DatePicker","asterisk","createElement","verticalAlign","marginLeft","isRequired","FormLabel","Tab","role","borderBottomLeftRadius","borderBottomRightRadius","active","Typeahead","useState","setOptions","isLoading","setIsLoading","searchAccessor","onSearch","renderMenuItemChildren","minLength","selectedValues","AsyncTypeahead","labelKey","query","results","defaultSelected","viewToCalendarViewMap","month","week","day","getCalendarViewFromViewProp","view","getViewsFromViewsProp","views","viewsString","slice","Calendar","events","onDateClick","onDateRangeSelected","onEventClick","fullCalendarRef","createRef","FullCalendar","selectable","left","center","right","defaultView","plugins","dayGridPlugin","timeGridPlugin","interactionPlugin","themeSystem","dateClick","arg","date","allDay","select","start","end","eventClick","e","event","library","fas","BootstrapBreadcrumb","BootstrapBreadcrumbItem","BoostrapColumn","lg","md","sm","xl","xs","BootstrapContainer","fluid","circle","rounded","imgAttributes","BootstrapImage","roundedCircle","ListGroup","layout","ListGroupItem","action","toggle","body","buttonsAlignment","showHeaderCloseButton","closeButton","middleButton","successButton","BootstrapModal","autoFocus","centered","verticallyCentered","keyboard","restoreFocus","onHide","Header","Title","Body","Footer","justifyContent","footer","collapsible","collapsed","open","setOpen","collapseIcon","Card","textAlign","checked","feedback","Editor","initialValue","init","menubar","statusbar","skin","content_css","toolbar","branding","onEditorChange","content","BootstrapRow","noGutters","multiple","sizeUnit","commonStyles","loading","margin","loaderStyles1","loaderStyles2","widthUnit","heightUnit","Spinners","rows","messageToShow","fontWeight","titleWithMessage","titleWithoutMessage","toast","error","info","success","warn","ToastContainer","autoClose","hideProgressBar","draggable","transition","Slide","draggablePercent","Player","poster","preload","muted","playsInline","aspectRatio","autoPlay","startTime"],"mappings":"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"}